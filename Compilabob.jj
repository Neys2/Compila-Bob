options { 
	JAVA_UNICODE_ESCAPE = true; 
	KEEP_LINE_COLUMN = true; 
	STATIC = false; 
} 
/*
javacc Compilabob.jj
javac *.java
java Compilabob < Ejemplo7.txt
*/

PARSER_BEGIN(Compilabob) 
public class Compilabob {  
	String errormsg="\n";
	int sentencias_inco =0;  
	public static void main(String args[])  { 
		Compilabob compilador = new Compilabob(System.in); 
		try { 
			compilador.Codigo(); 
		}catch( Exception e ){   
			System.out.println("\n\n" +"Sentencias incorrectas encontradas: "+compilador.sentencias_inco);
		}
		catch( TokenMgrError e ) { 
			System.out.println( "Error de Token" );
		} 
		System.out.println(compilador.errormsg);
		//System.out.println("Análisis Léxico ejecutado con éxito ! :D ---------------");
		 System.out.println("An"+"\u00e1"+"lisis l"+"\u00e9"+"xico y sint"+"\u00e1"+"ctico ejecutados con "+"\u00e9"+"xito");  
	}    
}   
PARSER_END(Compilabob)   

SKIP :   
{  
	< " " | "\t" | "\r" | "\n" | "\r\n" >  //White space
	| <"#" (~["\n","\r"])* ("\n"|"\r"|"\r\n") >  //Single-line comments
	| <"##"(~["/"])*  "#""#" >  //Multi-line comments
}  

TOKEN:   
{   
<INICIO: "compilar_coatl"> {System.out.println("INICIO  --> "+image);}  
|<FIN: "ejecutar_coatl">  {System.out.println("FIN  --> "+image);}  
|<IF: "decide"> {System.out.println("IF  --> "+image+"\r\n");}  
|<ELSE: "sino"> {System.out.println("ELSE  --> "+image+"\r\n");}  
|<CicloIterado: "repito hasta que">{System.out.println("CICLO ITERADO  --> "+image+"\r\n");}  
|<CicloLimit: "repito"> {System.out.println("CICLO LIMITE --> "+image+"\r\n");}
|<CicloWhile: "mientras"> {System.out.println("CICLO WHILE --> "+image+"\r\n");} 
|<ESCRIBIR: "muestra">{System.out.println("PRINT --> "+image+"\r\n");}
|<LEER:"recibir">{System.out.println("SCAN_DATA --> "+image+"\r\n");} 
}  

TOKEN:   
{   
<ParenIzq: "("> {System.out.println("Parentesis Izquierdo --> "+image);} 
|<ParenDer: ")"> {System.out.println("Parentesis Derecho --> "+image);}
|<SepIzq: "{"> {System.out.println("Delimitador Izquierdo --> "+image);} 
|<SepDer: "}"> {System.out.println("Delimitador Derecho --> "+image);} 
|<PuntoComa: ";"> {System.out.println("PUNTO Y COMA --> "+image);} 
|<COMA: ","> {System.out.println("COMA --> "+image);} 
}  

TOKEN:  
{  
<ASIGNACION: ":"> {System.out.println("Asignacion de valor -->"+image);}
|<MENOR: "<"> {System.out.println("MENOR QUE --> "+image);} 
|<MAYOR: ">"> {System.out.println("MAYOR QUE --> "+image);}
|<MENOR_IGUAL: "<="> {System.out.println("MENOR O IGUAL -->"+image);}
|<MAYOR_IGUAL: ">="> {System.out.println("MAYOR O IGUAL -->"+image);}
|<IGUALDAD: "="> {System.out.println("IGUAL --> "+image);}
|<OR: "|"> {System.out.println("OR --> "+image);} 
|<AND: "&"> {System.out.println("AND --> "+image);}
|<NOTEQ: "!="> {System.out.println("NOT EQUAL --> "+image);}
|<NOT: "!"> {System.out.println("NOT --> "+image);}
|<MAS: "+"> {System.out.println("SIGNO MAS --> "+image);} 
|<MENOS: "-"> {System.out.println("SIGNO MENOS --> "+image);}
|<DIV: "/"> {System.out.println("SIGNO DIVISION --> "+image);} 
|<MODULO: "%"> {System.out.println("SIGNO MODULO --> "+image);} 
|<MULTI: "*"> {System.out.println("SIGNO MULTIPLICACION --> "+image);}
}   
// [("E_")(["a"-"z"|"A"-"Z"|"_"|"0"-"9"])+]  
//"E_"(["A"-"Z","a"-"z"](["A"-"Z","a"-"z","0"-"9"])*)  
// NOT ~ 

TOKEN: 
{
	<CADENAS: ("\""(~["\"","#","\n","\r","#","#","\r","\n"])*"\"")>{System.out.println("CADENA DE TEXTO --> "+image+"\r\n");}
}

TOKEN: 
{ 
<ENTERO: "E_">{System.out.println("ENTERO --> "+image+"\r\n");} 
|<FLOTANTE: "D_">{System.out.println("FLOAT/DECIMAL --> "+image+"\r\n");} 
|<NUMERO: (["0"-"9"])+>{System.out.println("NUMERO ENTERO --> "+image+"\r\n");}  
|<NUMDECIMAL: (["0"-"9"])+ "." (["0"-"9"])+ | (["0"-"9"])+ "." | "." (["0"-"9"])+>{System.out.println("NUMERO DECIMAL --> "+image+"\r\n");} 
|<ID_CADENA: "C_">{System.out.println("STRING --> "+image+"\r\n");} 
|<BOOLEANO: "L_">{System.out.println("BOOLEANO --> "+image+"\r\n");} 
|<EST_LOGIC:("falso"|"verdad")>{System.out.println("ESTADO LOGICO --> "+image+"\r\n");} 
}   

TOKEN: 
{
	<IDENTIFICADOR:["A"-"Z","a"-"z"](["A"-"Z","a"-"z","0"-"9"])*>{System.out.println("IDENTIFICADOR --> "+image+"\r\n");} 

}
// |<COMILLAS:"\"">{System.out.println("COMILLAS  --> "+image+"\r\n");}  

// | ["A"-"Z","a"-"z"] (["A"-"Z","a"-"z","0"-"9"," "])* 

TOKEN: 
{ 
	<UNKNOW : ~[]>
}

 void Codigo():{} // Gramatica inicial que contiene el cuerpo basico del codigo
{
	<INICIO><SepIzq>  //Palabra reservada de inicio
	Cuerpo() // Conjunto de sentencias tipo; declaraciones, ciclos, decisiones, etc
	<SepDer><FIN><EOF> // Palabra reservada de cierre
} 

void Cuerpo():{} 
{ 
	(sentencias())* //el cuerpoe s basicamente es un conjunto de sentencias tamaño n
} 

void sentencias():{} 
{ 
try {
(LOOKAHEAD(2) 
 // PuntoComa toen separado debido a la variabilidad del codigo
Declaracion()   // Declaracion de Variables k
|( Asignacion() (<PuntoComa>|errorFinlinea())) //Asignacion de valores 
| Ciclo_RepitoHastaQue() 
| Ciclo_RepitoMientras()
| Decide()
| Muestra()
| error()
  )
}
catch (ParseException e) {
	System.out.println(e.toString());  // print the error message
    error_skipto(PuntoComa, FIN, EOF);
  } 

}
/*
void DeclaCADENA():{}
{

}
void AsignaCADENA():{}
{
	
} */

void Muestra():{}
{

	<ESCRIBIR> <ParenIzq>  Mensaje()   <ParenDer> (<PuntoComa>|errorFinlinea())
}

void Mensaje():{}{

	Concatenacion() | {}
}

void Concatenacion():{}{

  ( LOOKAHEAD(2)
  	(<IDENTIFICADOR>|<CADENAS>) <MAS> Concatenacion() | (<IDENTIFICADOR>|<CADENAS>)) 
}

//########  DECIDE IF-ELSE ##########
void Decide():{}
{
IF()( 
	LOOKAHEAD(2)
	ELSE()|{})

}
void IF():{ }
{
	<IF> <ParenIzq> OpComparacion() <ParenDer>  <ASIGNACION>  <SepIzq>
	(	LOOKAHEAD(2)
	sentencias()|error())*
	<SepDer>
}

void ELSE():{}
{
	<ELSE> <SepIzq> 
	(	LOOKAHEAD(2)
	sentencias()|error())* <SepDer>
}

// ############## CICLOS #############

void Ciclo_RepitoHastaQue():{}
{
	<CicloIterado> <ParenIzq> <IDENTIFICADOR> <COMA> (<IDENTIFICADOR>|DataType()) <ParenDer> <ASIGNACION> 
	<SepIzq> (sentencias())* <SepDer> (<PuntoComa>|errorFinlinea())

}

 void Ciclo_RepitoMientras():{}
{
	<CicloLimit> <ASIGNACION> <SepIzq> 
	(sentencias())* 
	<SepDer> <CicloWhile> <ParenIzq> OpComparacion() <ParenDer> (<PuntoComa>|errorFinlinea())
} 
 
// DECLARACION DE VARIABLES 
void Declaracion():{}
{  
  Variable_dato() 
	<IDENTIFICADOR> (
		(<PuntoComa>|errorFinlinea())| (<ASIGNACION>  AsignacionD() (<PuntoComa>|errorFinlinea())) ) 
} 
// ASIGNACION DE VALORES DESPUES DE UNA DECLARACION
void AsignacionD():{} 
{  
	( <LEER>  | Expresion() )
} 
// ASIGNACION GENERAL DE VALORES A UNA VARIABLE
void Asignacion():{} 
{  <IDENTIFICADOR> <ASIGNACION> ( <LEER>|Expresion() ) 
} 
//###### GRAMATICA PARA EXPRESIONES MATEMATICAS DESPUES DE UNA ASIGNACION O DECLARACION

void Expresion():{} 
{   
 
	Termino() ((<MAS>|<MENOS>) Termino())*

	  
} 

// Epsilon option ---> | {}

void Termino():{}
{  
	Factor() ((<MULTI>|<DIV>|<MODULO>) Factor())*
}
void Factor():{}
{
	(<MENOS> Factor()) | Primario()
 
}

void Primario():{}
{
	((<ParenIzq>	Expresion() <ParenDer>)  | DataType() | <IDENTIFICADOR> )
}


// ############## OPERACIONES DE COMPARACION PARA IF O CICLOS  ####################
void OpComparacion():{}{
		ExpresionL() Comparadores() ExpresionL()
}

void ExpresionL():{} 
{   LOOKAHEAD(2) 
	(  FactorL() Logicos() ExpresionL()  ) 
	  
	|  FactorL()
} 

void FactorL():{}
{
	(  DataType() | <IDENTIFICADOR> )
}

// Epsilon option ---> | {}


 // DATOS Y OPERADORES USADOS EN SENTENCIAS
void DataType():{} 
{ //Tipos de datos  
	 
<NUMERO> |<NUMDECIMAL> | <EST_LOGIC>|<CADENAS> 
} 
void Comparadores():{}
{
 <MENOR>   
|<MAYOR> 
|<MENOR_IGUAL>  
|<MAYOR_IGUAL>  
|<IGUALDAD> 
|<NOTEQ> 
}

void Logicos():{}
{
  <OR>  
 |<AND>  
}


void Operadores():{} 
{ //Operadores para expresiones matematicas
	LOOKAHEAD(3)
 <MAS> 
|<MENOS>  
|<DIV> 
|<MODULO>   
|<MULTI>   
} 

void Variable_dato():{} 
{ //Tipo del dato de la variable del dato a la hora de su declaracion
	LOOKAHEAD(3)
<ENTERO>   
|<FLOTANTE>   
|<ID_CADENA>   
|<BOOLEANO>  
} 

JAVACODE
void error_skipto(int puntocoma, int fincode, int finfile) {
  Token t;
  sentencias_inco = sentencias_inco +1;
  // consume tokens all the way up to a token of "kind" - use a do-while loop
  // rather than a while because the current token is the one immediately before
  // the erroneous token (in our case the token immediately before what should
  // have been "if"/"while". 
  do {
    t = getNextToken();
	System.out.println("ESTOY SALTANDO ------------ "+t.image);
  }
  while ( (t.kind !=puntocoma)&&(t.kind !=fincode)&&(t.kind !=finfile));
}

void error():  
{
	String errores = " "; 
	int linea, colum; 
	Token t;
} 
{  
	t = <UNKNOW> 
{ 
	linea = t.beginLine;
	colum = t.endColumn; 
	errores = "Simbolo: " + t.image + " no reconocido en la línea "+String.valueOf(linea)+" columna "+String.valueOf(colum)+"\r\n"; 
	errormsg = errormsg+errores;
} 
} 

JAVACODE
void errorFinlinea(){
	a++;
	System.out.println("Error sintáctico: Falta ';' En la linea: "+token.beginLine+" Columna: "+token.beginColumn);
}

/*

*/

