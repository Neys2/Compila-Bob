void Codigo():{} // Gramatica inicial que contiene el cuerpo basico del codigo
{
	<INICIO><SepIzq>  //Palabra reservada de inicio
	(Cuerpo() | erroresGram())*// Conjunto de sentencias tipo; declaraciones, ciclos, decisiones, etc
	<SepDer><FIN><EOF> // Palabra reservada de cierre
	| erroresCodigo()*
} 

void sentencias():{ } 
{ 
LOOKAHEAD(2)   
 // PuntoComa toen separado debido a la variabilidad del codigo
Declaracion()   // Declaracion de Variables k
| Asignacion() //Asignacion de valores 
| Ciclo_RepitoHastaQue() 
| condicional()
<PuntoComa>
// | Aqui ponen las demas sentencias
}

void CicloIterado():{}
{
	<CicloIterado> <ParenIzq> <IDENTIFICADOR> <COMA> (<IDENTIFICADOR>|DataType()) <ParenDer> <ASIGNACION> 
	<SepIzq> sentencias() <SepDer> 

}

void erroresCodigo():{}
{
	( errorCodigoA()
	| errorCodigoB()
	)*
}

void erroresGram():{}
{
	( errorCicloIteradoA()
	| errorCicloIteradoB()
	)*
}


void errorCodigoA():
{
	String errores = " ";
	Token t; 
}
{
	<INICIO>
	(Cuerpo() | erroresGram())*// Conjunto de sentencias tipo; declaraciones, ciclos, decisiones, etc
	<SepDer><FIN><EOF>
}
{
	errores = "Error sintactico en la línea " +String.valueOf(t.beginLine)+" columna "+
	String.valueOf(t.endColumn)+" se esperaba '{'\r\n"; 
	errormsg = errormsg+errores; 
}
void errorCodigoB():
{
	String errores = " ";
	Token t; 
}
{
	<INICIO><SepIzq>
	(Cuerpo() | erroresGram())* // Conjunto de sentencias tipo; declaraciones, ciclos, decisiones, etc
	<SepDer><EOF>
}
{
	errores = "Error sintactico en la línea " +String.valueOf(t.beginLine)+" columna "+
	String.valueOf(t.endColumn)+" se esperaba ' ejecutar_coatl'\r\n"; 
	errormsg = errormsg+errores; 
}

void errorCicloIteradoA():
{
	String errores = " ";
	Token t; 
}
{
    <CicloIterado> <ParenIzq> <IDENTIFICADOR> <COMA> (<IDENTIFICADOR>|DataType()) <ParenDer> <ASIGNACION> 
	<SepIzq> ( sentencias() )*
}
{
	errores = "Error sintactico en la línea " +String.valueOf(t.beginLine)+" columna "+
	String.valueOf(t.endColumn)+" se esperaba '}'\r\n"; 
	errormsg = errormsg+errores; 
}