/* Generated By:JavaCC: Do not edit this line. CompilaBob.java */
public class CompilaBob implements CompilaBobConstants {
        String errormsg="\n";
        public static void main(String args[])  {
                CompilaBob compilador = new CompilaBob(System.in);
                try {
                        compilador.start();
                }catch( Exception e ){
                        System.out.println( "Expresi\u00f3n no v\u00e1lida" );
                }catch( TokenMgrError e ) {
                        System.out.println( "Error de Token" );
                }
                System.out.println(compilador.errormsg);
                System.out.println("An\u00e1lisis L\u00e9xico ejecutado con \u00e9xito ! :D ---------------");
        }

  final public void start() throws ParseException {
    jj_consume_token(INICIO);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
        jj_consume_token(IF);
        break;
      case ELSE:
        jj_consume_token(ELSE);
        break;
      case CicloIterado:
        jj_consume_token(CicloIterado);
        break;
      case CicloLimit:
        jj_consume_token(CicloLimit);
        break;
      case CicloWhile:
        jj_consume_token(CicloWhile);
        break;
      case ESCRIBIR:
        jj_consume_token(ESCRIBIR);
        break;
      case LEER:
        jj_consume_token(LEER);
        break;
      case ParenIzq:
        jj_consume_token(ParenIzq);
        break;
      case ParenDer:
        jj_consume_token(ParenDer);
        break;
      case SepIzq:
        jj_consume_token(SepIzq);
        break;
      case SepDer:
        jj_consume_token(SepDer);
        break;
      case PuntoComa:
        jj_consume_token(PuntoComa);
        break;
      case SepParametro:
        jj_consume_token(SepParametro);
        break;
      case ASIGNACION:
        jj_consume_token(ASIGNACION);
        break;
      case MENOR:
        jj_consume_token(MENOR);
        break;
      case MAYOR:
        jj_consume_token(MAYOR);
        break;
      case MENOR_IGUAL:
        jj_consume_token(MENOR_IGUAL);
        break;
      case MAYOR_IGUAL:
        jj_consume_token(MAYOR_IGUAL);
        break;
      case IGUALDAD:
        jj_consume_token(IGUALDAD);
        break;
      case OR:
        jj_consume_token(OR);
        break;
      case AND:
        jj_consume_token(AND);
        break;
      case NOT:
        jj_consume_token(NOT);
        break;
      case MAS:
        jj_consume_token(MAS);
        break;
      case MENOS:
        jj_consume_token(MENOS);
        break;
      case DIV:
        jj_consume_token(DIV);
        break;
      case MODULO:
        jj_consume_token(MODULO);
        break;
      case MULTI:
        jj_consume_token(MULTI);
        break;
      case ENTERO:
        jj_consume_token(ENTERO);
        break;
      case FLOTANTE:
        jj_consume_token(FLOTANTE);
        break;
      case NUMERO:
        jj_consume_token(NUMERO);
        break;
      case NUMDECIMAL:
        jj_consume_token(NUMDECIMAL);
        break;
      case CADENAS:
        jj_consume_token(CADENAS);
        break;
      case ID_CADENA:
        jj_consume_token(ID_CADENA);
        break;
      case BOOLEANO:
        jj_consume_token(BOOLEANO);
        break;
      case EST_LOGIC:
        jj_consume_token(EST_LOGIC);
        break;
      case IDENTIFICADOR:
        jj_consume_token(IDENTIFICADOR);
        break;
      case UNKNOW:
        error();
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case ELSE:
      case CicloIterado:
      case CicloLimit:
      case CicloWhile:
      case ESCRIBIR:
      case LEER:
      case ParenIzq:
      case ParenDer:
      case SepIzq:
      case SepDer:
      case PuntoComa:
      case SepParametro:
      case ASIGNACION:
      case MENOR:
      case MAYOR:
      case MENOR_IGUAL:
      case MAYOR_IGUAL:
      case IGUALDAD:
      case OR:
      case AND:
      case NOT:
      case MAS:
      case MENOS:
      case DIV:
      case MODULO:
      case MULTI:
      case CADENAS:
      case ENTERO:
      case FLOTANTE:
      case NUMERO:
      case NUMDECIMAL:
      case ID_CADENA:
      case BOOLEANO:
      case EST_LOGIC:
      case IDENTIFICADOR:
      case UNKNOW:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
    }
    jj_consume_token(FIN);
    jj_consume_token(0);
  }

  final public void error() throws ParseException {
        String errores = " ";
        int linea, colum;
        Token t;
    t = jj_consume_token(UNKNOW);
        linea = t.beginLine;
        colum = t.endColumn;
        errores = "Simbolo: " + t.image + " no reconocido en la l\u00ednea "+String.valueOf(linea)+" columna "+String.valueOf(colum)+"\r\n";
        errormsg = errormsg+errores;
  }

  /** Generated Token Manager. */
  public CompilaBobTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[2];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xffffffc0,0xffffffc0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x7ff,0x7ff,};
   }

  /** Constructor with InputStream. */
  public CompilaBob(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public CompilaBob(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CompilaBobTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public CompilaBob(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new CompilaBobTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public CompilaBob(CompilaBobTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(CompilaBobTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[43];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 2; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 43; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
